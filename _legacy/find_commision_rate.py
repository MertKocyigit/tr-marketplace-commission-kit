#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import re
from typing import Optional, List, Tuple, Dict
from difflib import get_close_matches
from functools import lru_cache
import pandas as pd

# Local imports
try:
    from config import *
    from utils import *
except ImportError:
    print("HATA: config.py ve utils.py dosyalarƒ± gerekli!")
    print("L√ºtfen t√ºm dosyalarƒ± aynƒ± klas√∂re yerle≈ütirin.")
    sys.exit(1)


class TrendyolCommissionLookup:
    def __init__(self):
        self.logger = setup_logging(str(LOG_PATH), LOG_LEVEL)
        self.df = None
        self.search_cache = {}
        self.load_data()

    def load_data(self) -> None:
        """CSV dosyasƒ±nƒ± y√ºkler ve normalize eder"""
        try:
            if not CSV_PATH.exists():
                raise FileNotFoundError(f"CSV dosyasƒ± bulunamadƒ±: {CSV_PATH}")

            self.df = pd.read_csv(CSV_PATH, encoding="utf-8-sig")
            self.logger.info(f"CSV y√ºklendi: {len(self.df)} satƒ±r")

            required_columns = ["Kategori", "Alt Kategori", "√úr√ºn Grubu", "Komisyon_%_KDV_Dahil"]
            missing = [col for col in required_columns if col not in self.df.columns]
            if missing:
                raise ValueError(f"CSV'de eksik s√ºtunlar: {', '.join(missing)}")

            # CRITICAL FIX: Ensure all text columns are strings before normalization
            self.df["Kategori"] = self.df["Kategori"].astype(str)
            self.df["Alt Kategori"] = self.df["Alt Kategori"].astype(str)
            self.df["√úr√ºn Grubu"] = self.df["√úr√ºn Grubu"].astype(str)

            # Create normalized search columns
            self.df["_kategori_norm"] = self.df["Kategori"].apply(normalize_text)
            self.df["_alt_kategori_norm"] = self.df["Alt Kategori"].apply(normalize_text)
            self.df["_urun_grubu_norm"] = self.df["√úr√ºn Grubu"].apply(normalize_text)

            self.logger.info(f"Kategoriler: {self.df['Kategori'].nunique()}")
            self.logger.info(f"Alt kategoriler: {self.df['Alt Kategori'].nunique()}")
            self.logger.info(f"√úr√ºn gruplarƒ±: {self.df['√úr√ºn Grubu'].nunique()}")

        except Exception as e:
            self.logger.error(f"Veri y√ºklenemedi: {e}")
            raise

    @lru_cache(maxsize=CACHE_SIZE)
    def search_products(self, query: str) -> pd.DataFrame:
        """√úr√ºn arama fonksiyonu"""
        query_norm = normalize_text(query)
        self.logger.debug(f"Arama yapƒ±lƒ±yor: '{query}' -> '{query_norm}'")

        if not query_norm:
            return pd.DataFrame(columns=self.df.columns)

        # 1. Exact word match in product groups
        exact_word_pattern = create_search_pattern(query_norm, exact_word=True)
        mask_exact = self.df["_urun_grubu_norm"].str.contains(exact_word_pattern, regex=True, na=False)
        exact_results = self.df[mask_exact]

        if not exact_results.empty:
            self.logger.debug(f"Tam kelime e≈üle≈ümesi bulundu: {len(exact_results)} sonu√ß")
            return exact_results

        # 2. Partial match in product groups
        partial_pattern = create_search_pattern(query_norm, exact_word=False)
        mask_partial = self.df["_urun_grubu_norm"].str.contains(partial_pattern, regex=True, na=False)
        partial_results = self.df[mask_partial]

        if not partial_results.empty:
            self.logger.debug(f"Kƒ±smi e≈üle≈üme bulundu: {len(partial_results)} sonu√ß")
            return partial_results

        # 3. Category and subcategory search
        mask_category = (
                self.df["_kategori_norm"].str.contains(partial_pattern, regex=True, na=False) |
                self.df["_alt_kategori_norm"].str.contains(partial_pattern, regex=True, na=False)
        )
        category_results = self.df[mask_category]

        if not category_results.empty:
            self.logger.debug(f"Kategori e≈üle≈ümesi bulundu: {len(category_results)} sonu√ß")
            return category_results

        # 4. Fuzzy matching
        all_product_groups = get_unique_values_from_column(self.df, "√úr√ºn Grubu")
        fuzzy_matches = get_close_matches(
            query, all_product_groups,
            n=MAX_FUZZY_RESULTS,
            cutoff=MIN_SIMILARITY_THRESHOLD
        )

        if fuzzy_matches:
            self.logger.debug(f"Fuzzy e≈üle≈üme bulundu: {fuzzy_matches}")
            fuzzy_results = self.df[self.df["√úr√ºn Grubu"].isin(fuzzy_matches)]
            return fuzzy_results

        # 5. Broad search across all text fields
        broad_mask = (
                self.df["_kategori_norm"].str.contains(partial_pattern, regex=True, na=False) |
                self.df["_alt_kategori_norm"].str.contains(partial_pattern, regex=True, na=False) |
                self.df["_urun_grubu_norm"].str.contains(partial_pattern, regex=True, na=False)
        )
        broad_results = self.df[broad_mask]

        if not broad_results.empty:
            self.logger.debug(f"Geni≈ü arama sonucu: {len(broad_results)} sonu√ß")
            return broad_results

        self.logger.debug("Hi√ßbir e≈üle≈üme bulunamadƒ±")
        return pd.DataFrame(columns=self.df.columns)

    def get_best_match(self, results: pd.DataFrame) -> Optional[pd.Series]:
        """En iyi e≈üle≈ümeyi bulur"""
        if results.empty:
            return None

        grouped = (
            results.groupby(["Kategori", "Alt Kategori", "√úr√ºn Grubu"], dropna=False)
            ["Komisyon_%_KDV_Dahil"]
            .max()
            .reset_index()
            .sort_values("Komisyon_%_KDV_Dahil", ascending=False)
        )

        return grouped.iloc[0] if not grouped.empty else None

    def get_alternative_matches(self, results: pd.DataFrame, exclude_best: pd.Series) -> pd.DataFrame:
        """Alternatif e≈üle≈ümeleri bulur"""
        if results.empty or exclude_best is None:
            return pd.DataFrame()

        alternatives = results[
            ~(
                    (results["Kategori"] == exclude_best["Kategori"]) &
                    (results["Alt Kategori"] == exclude_best["Alt Kategori"]) &
                    (results["√úr√ºn Grubu"] == exclude_best["√úr√ºn Grubu"])
            )
        ]

        if alternatives.empty:
            return pd.DataFrame()

        grouped_alternatives = (
            alternatives.groupby(["Kategori", "Alt Kategori", "√úr√ºn Grubu"], dropna=False)
            ["Komisyon_%_KDV_Dahil"]
            .max()
            .reset_index()
            .sort_values("Komisyon_%_KDV_Dahil", ascending=False)
            .head(MAX_OTHER_RESULTS)
        )

        return grouped_alternatives

    def format_result_display(self, result: pd.Series, show_detailed: bool = True) -> str:
        """Sonu√ß g√∂r√ºnt√ºleme formatƒ±"""
        if result is None:
            return "Sonu√ß bulunamadƒ±"

        commission_str = format_commission_display(
            result["Komisyon_%_KDV_Dahil"],
            SHOW_COMMISSION_AS_PERCENTAGE
        )

        if show_detailed:
            return f"""
üì¶ En ƒ∞yi E≈üle≈üme:
   üè∑Ô∏è  Kategori     : {result['Kategori']}
   üìÇ  Alt Kategori : {result['Alt Kategori']}
   üìã  √úr√ºn Grubu   : {result['√úr√ºn Grubu']}
   üí∞  Komisyon     : {commission_str}"""
        else:
            return f"{result['Kategori']} > {result['Alt Kategori']} > {result['√úr√ºn Grubu']} | {commission_str}"

    def format_alternatives_display(self, alternatives: pd.DataFrame) -> str:
        """Alternatif sonu√ßlarƒ±n g√∂r√ºnt√ºleme formatƒ±"""
        if alternatives.empty:
            return ""

        lines = ["\nüîç Diƒüer Olasƒ± E≈üle≈ümeler:"]

        for _, row in alternatives.iterrows():
            commission_str = format_commission_display(
                row["Komisyon_%_KDV_Dahil"],
                SHOW_COMMISSION_AS_PERCENTAGE
            )
            lines.append(f"   ‚Ä¢ {row['Kategori']} > {row['Alt Kategori']} > {row['√úr√ºn Grubu']} | {commission_str}")

        return "\n".join(lines)

    def search_and_display(self, query: str) -> bool:
        """Arama yapar ve sonu√ßlarƒ± g√∂r√ºnt√ºler"""
        if not query.strip():
            return False

        try:
            results = self.search_products(query.strip())

            if results.empty:
                print(f"\n‚ùå '{query}' i√ßin sonu√ß bulunamadƒ±.")
                print("üí° √ñneriler:")
                print("   ‚Ä¢ Daha genel bir terim deneyin (√∂rn: '√ºt√º' yerine 'ev aletleri')")
                print("   ‚Ä¢ Yazƒ±m hatasƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol edin")
                print("   ‚Ä¢ Farklƒ± kelimeler kullanmayƒ± deneyin")
                return False

            best_match = self.get_best_match(results)

            if best_match is None:
                print(f"\n‚ö†Ô∏è '{query}' i√ßin uygun komisyon bulunamadƒ±.")
                return False

            print(self.format_result_display(best_match, SHOW_DETAILED_RESULTS))

            if SHOW_DETAILED_RESULTS:
                alternatives = self.get_alternative_matches(results, best_match)
                alternatives_text = self.format_alternatives_display(alternatives)
                if alternatives_text:
                    print(alternatives_text)

            total_matches = len(results.groupby(["Kategori", "Alt Kategori", "√úr√ºn Grubu"]).size())
            if total_matches > 1:
                print(f"\nüìä Toplam {total_matches} farklƒ± √ºr√ºn grubu e≈üle≈ümesi bulundu.")
            return True

        except Exception as e:
            self.logger.error(f"Arama hatasƒ±: {e}")
            print(f"\nüí• Arama sƒ±rasƒ±nda hata: {e}")
            return False

    def get_search_suggestions(self, limit: int = 10) -> List[str]:
        """Pop√ºler arama √∂nerileri getirir"""
        try:
            all_products = ' '.join(self.df['√úr√ºn Grubu'].astype(str).tolist())
            words = re.findall(r'\b\w{3,}\b', all_products.lower())
            word_freq = {}
            for word in words:
                if word not in ['i√ßin', 'ile', 'olan', 'her', 't√ºm']:  # Stop words
                    word_freq[word] = word_freq.get(word, 0) + 1
            popular_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
            return [word for word, freq in popular_words[:limit]]

        except Exception as e:
            self.logger.warning(f"√ñneri olu≈üturulamadƒ±: {e}")
            return ["telefon", "ayakkabƒ±", "kitap", "elektronik", "giyim"]

    def show_statistics(self) -> None:
        """Sistem istatistiklerini g√∂sterir"""
        if self.df is None:
            return

        print(f"""
üìà Sistem ƒ∞statistikleri:
   üìÅ Toplam kayƒ±t      : {len(self.df):,}
   üè∑Ô∏è Kategori sayƒ±sƒ±    : {self.df['Kategori'].nunique():,}
   üìÇ Alt kategori sayƒ±sƒ±: {self.df['Alt Kategori'].nunique():,}
   üìã √úr√ºn grubu sayƒ±sƒ±  : {self.df['√úr√ºn Grubu'].nunique():,}
   üí∞ Ort. komisyon     : {self.df['Komisyon_%_KDV_Dahil'].mean():.2f}%
   üìä Min/Max komisyon  : {self.df['Komisyon_%_KDV_Dahil'].min():.2f}% / {self.df['Komisyon_%_KDV_Dahil'].max():.2f}%
   üóÇÔ∏è CSV dosyasƒ±       : {CSV_PATH}""")

    def interactive_search(self) -> None:
        """Etkile≈üimli arama aray√ºz√º"""
        print(f"""
üîç Trendyol Komisyon Sorgulama Sistemi v2
{'=' * 50}
üìã Kullanƒ±m: √úr√ºn adƒ± girin (√∂rn: 'telefon', 'ayakkabƒ±', 'kitap')
üí° Komutlar: 
   ‚Ä¢ 'stats' - sistem istatistikleri
   ‚Ä¢ 'help' - yardƒ±m
   ‚Ä¢ 'clear' - ekranƒ± temizle
   ‚Ä¢ Enter (bo≈ü) - √ßƒ±kƒ±≈ü
""")

        suggestions = self.get_search_suggestions(8)
        if suggestions:
            print(f"üéØ Pop√ºler aramalar: {', '.join(suggestions)}")
        print("-" * 50)

        while True:
            try:
                query = input("\nüîç √úr√ºn adƒ±: ").strip()

                if not query:
                    print("üëã √áƒ±kƒ±lƒ±yor...")
                    break

                if query.lower() == 'stats':
                    self.show_statistics()
                    continue
                elif query.lower() == 'help':
                    print("""
üÜò Yardƒ±m:
   ‚Ä¢ Genel terimler kullanƒ±n: 'telefon', 'ayakkabƒ±'
   ‚Ä¢ Marka isimleri genelde kategori deƒüil: 'samsung' yerine 'telefon'
   ‚Ä¢ Birden fazla kelime: 'spor ayakkabƒ±', 'cep telefonu'
   ‚Ä¢ T√ºrk√ße karakter kullanabilirsiniz: '√ßama≈üƒ±r makinesi'
                    """)
                    continue
                elif query.lower() == 'clear':
                    import os
                    os.system('cls' if os.name == 'nt' else 'clear')
                    continue

                self.search_and_display(query)

            except KeyboardInterrupt:
                print("\n\nüëã Sistem kapatƒ±lƒ±yor...")
                break
            except Exception as e:
                self.logger.error(f"Beklenmeyen hata: {e}")
                print(f"\nüí• Beklenmeyen hata: {e}")


def main():
    try:
        lookup_system = TrendyolCommissionLookup()
        lookup_system.interactive_search()

    except FileNotFoundError as e:
        print(f"\n‚ùå Dosya hatasƒ±: {e}")
        print("üí° √ñnce extract script'ini √ßalƒ±≈ütƒ±rarak CSV dosyasƒ±nƒ± olu≈üturun.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Sistem hatasƒ±: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()